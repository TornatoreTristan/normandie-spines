---
import Subitem from "../components/Nav/Subitem.vue";
const { menu } = Astro.props;
import { getSiteLogo } from "../lib/api";
const firstLevelMenu = menu.menuItems.nodes.filter(
  (item) => !item.parentDatabaseId
);

const logo = await getSiteLogo();
---

<header>
  <div>
    <a href="/" class="site-name">
      <img
        src={logo.data.generalSettings.customLogoUrl}
        alt="NormandyQuest tourime en Normandie et en France"
        width="100"
      />
    </a>
  </div>
  <div class="hamburger">&#9776;</div>
  <nav>
    <ul>
      {
        firstLevelMenu.map((menuItem) => {
          return (
            <li class="nav-item">
              <a href={menuItem.uri || "/"}>{menuItem.label}</a>
              {menuItem.childItems.nodes.length >= 1 ? (
                <div class="submenu">
                  <Subitem subitems={menuItem.childItems.nodes} client:load />
                </div>
              ) : null}
            </li>
          );
        })
      }
    </ul>
  </nav>
</header>

<script>
  const hamburger = document.querySelector(".hamburger");
  const nav = document.querySelector("nav");

  hamburger.addEventListener("click", toggleNav);

  function toggleNav() {
    nav.classList.toggle("show-nav");
    console.log("running");
  }
</script>

<style>
  header {
    height: 60px;
    padding: 20px 1%;
    display: grid;
    grid-template-columns: 1fr 3fr 1fr;
    align-items: center;
  }
  /* hamburger icon styling */
  .site-name {
    width: auto;
    display: inline;
  }
  .hamburger {
    display: none;
    font-size: 2rem;
    color: #000;
    margin-right: 10px;
    cursor: pointer;
  }
  /* nav menu styling */
  nav {
    justify-self: center;
  }
  nav ul {
    display: flex;
    margin: 0;
    padding: 0;
    list-style: none;
  }
  nav li {
    margin-left: 20px;
  }
  nav a {
    text-decoration: none;
    color: #282828;
    padding-bottom: 5px;
    transition: all 0.3s;
    border-bottom: 1px solid #fff;
  }
  nav a:hover {
    color: #000;
    border-bottom: 1px solid #000;
  }
  .nav-item {
    position: relative;
  }
  .submenu {
    display: none;
    position: absolute;
    padding: 20px 30px;
    top: 40px;
    left: 50%;
    opacity: 0;
    visibility: hidden;
    min-width: 200px;
    border-radius: 10px;
    box-shadow: 0 0 30px rgba(0, 0, 0, 0.1);
    position: absolute;
    background-color: #fff;
    transform: translateX(-50%);
    transition: all 0.3s ease-in-out;
  }
  .nav-item:hover .submenu {
    /* display: block; */
    opacity: 1;
    visibility: visible;
  }
  @media screen and (min-width: 767px) {
    header {
      padding: 20px 14%;
    }
  }
  /* media query for mobile */
  @media (max-width: 767px) {
    .hamburger {
      display: block;
    }
    nav {
      display: none;
      flex-direction: column;
      justify-content: flex-start;
      position: absolute;
      top: 60px;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #fff;
    }
    nav ul {
      flex-direction: column;
      align-items: center;
    }
    nav li {
      margin: 10px 0;
    }
    nav.show-nav {
      display: flex;
    }
  }
</style>

<script>
  let currentOpenSubmenu = null; // Variable pour garder une trace du sous-menu ouvert

  document.querySelectorAll(".nav-item").forEach((item) => {
    let timer;

    item.addEventListener("mouseenter", () => {
      clearTimeout(timer); // Annuler le masquage précédent si l'utilisateur revient sur l'élément
      let submenu = item.querySelector(".submenu") as HTMLElement; // Assurez-vous que 'submenu' est déclaré une seule fois

      if (submenu) {
        if (currentOpenSubmenu && currentOpenSubmenu !== submenu) {
          currentOpenSubmenu.style.display = "none"; // Fermer le sous-menu précédent
        }
        currentOpenSubmenu = submenu; // Mettre à jour le sous-menu actuellement ouvert
        submenu.style.display = "block"; // Afficher le sous-menu actuel
      }
    });

    item.addEventListener("mouseleave", () => {
      let submenu = item.querySelector(".submenu") as HTMLElement; // Pas besoin de redéclarer 'submenu' ici car elle est déjà déclarée ci-dessus
      if (submenu) {
        timer = setTimeout(() => {
          submenu.style.display = "none"; // Masquer le sous-menu après 3 secondes
          if (submenu === currentOpenSubmenu) {
            currentOpenSubmenu = null; // Réinitialiser la variable si c'est le sous-menu actuellement ouvert
          }
        }, 3000); // 3000 millisecondes = 3 secondes
      }
    });
  });
</script>
